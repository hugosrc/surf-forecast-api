{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.0",
    "title": "Surf Forecast",
    "description": "Surf Forecast API",
    "termsOfService": "http://api_url/terms/",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/",
      "description": "Local server"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "description": "Create a new user.",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The user has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "User validation failed: email: Path `email` is required.",
                  "code": 400,
                  "error": "Bad Request"
                }
              }
            }
          },
          "409": {
            "description": "User conflict.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "User validation failed: email: already exists in the database.",
                  "code": 409,
                  "error": "Conflict"
                }
              }
            }
          }
        }
      }
    },
    "/users/authenticate": {
      "post": {
        "description": "Authenticate the user on the API.",
        "operationId": "authenticateUser",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuth"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user has been authenticate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "User not found!",
                  "code": 401,
                  "error": "Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "description": "Get user profile",
        "operationId": "getUserProfile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/bearerToken"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returned user profile information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "invalid token",
                  "code": 401,
                  "error": "invalid token"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "User not found!",
                  "code": 404,
                  "error": "Not Found"
                }
              }
            }
          }
        }
      }
    },
    "/beaches": {
      "post": {
        "description": "Create a new beach.",
        "operationId": "createBeach",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/bearerToken"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Beach"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The Beach has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BeachCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error validating the beach data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Beach validation failed: position: Path `position` is required.",
                  "code": 400,
                  "error": "Bad Request"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "invalid token",
                  "code": 401,
                  "error": "invalid token"
                }
              }
            }
          }
        }
      }
    },
    "/forecast": {
      "get": {
        "description": "Get the list of forecast ordered by the most ranked.",
        "operationId": "getForecast",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/bearerToken"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The list of forecast has been returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeForecast"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "invalid token",
                  "code": 401,
                  "error": "invalid token"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Too many requests to the /forecast endpoint",
                  "code": "429",
                  "error": "Too Many Requests"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "id":{
        "type": "string",
        "example": "5e8131eba7768d9e4f06c884"
      },
      "name": {
        "type": "string",
        "example": "John Doe"
      },
      "email": {
        "type": "string",
        "example": "john@mail.com"
      },
      "password": {
        "type": "string",
        "example": "12345#@$$%"
      },
      "bearerToken": {
        "type": "string",
        "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSm9obiBEb2U..."
      },
      "beachName": {
        "type": "string",
        "example": "Copacabana beach"
      },
      "beachLat": {
        "type": "number",
        "example": 10.55
      },
      "beachLng": {
        "type": "number",
        "example": -10.55
      },
      "beachPosition": {
        "type": "string",
        "enum": ["N", "S", "W", "E"],
        "example": "S"
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/name"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "password": {
            "$ref": "#/components/schemas/password"
          }
        }
      },
      "UserAuth": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "password": {
            "$ref": "#/components/schemas/password"
          }
        }
      },
      "UserCreatedResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "token": {
            "$ref": "#/components/schemas/bearerToken"
          }
        }
      },
      "AuthenticatedUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "token": {
            "$ref": "#/components/schemas/bearerToken"
          }
        }
      },
      "ProfileUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Beach": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/beachName"
          },
          "lat": {
            "$ref": "#/components/schemas/beachLat"
          },
          "lng": {
            "$ref": "#/components/schemas/beachLng"
          },
          "position": {
            "$ref": "#/components/schemas/beachPosition"
          }
        },
        "required": ["name", "lat", "lng", "position"]
      },
      "BeachCreatedResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "name": {
            "$ref": "#/components/schemas/beachName"
          },
          "lat": {
            "$ref": "#/components/schemas/beachLat"
          },
          "lng": {
            "$ref": "#/components/schemas/beachLng"
          },
          "position": {
            "$ref": "#/components/schemas/beachPosition"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "BeachForecast": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/components/schemas/beachName"
            },
            "lat": {
              "$ref": "#/components/schemas/beachLat"
            },
            "lng": {
              "$ref": "#/components/schemas/beachLng"
            },
            "position": {
              "$ref": "#/components/schemas/beachPosition"
            },
            "rating": {
              "type": "number",
              "example": 3
            },
            "swellDirection": {
              "type": "number",
              "description": "Swell direction in degrees",
              "example": 300
            },
            "swellHeight": {
              "type": "number",
              "description": "Swell height in meters",
              "example": 1
            },
            "swellPeriod": {
              "type": "number",
              "description": "Swell period in seconds",
              "example": 13.67
            },
            "waveDirection": {
              "type": "number",
              "description": "Wave direction in degrees",
              "example": 234
            },
            "waveHeight": {
              "type": "number",
              "description": "Wave height in meters",
              "example": 1.5
            },
            "windDirection": {
              "type": "number",
              "description": "Wind direction in degrees",
              "example": 234
            },
            "windSpeed": {
              "type": "number",
              "description": "Wind speed in meters per second",
              "example": 10
            },
            "time": {
              "type": "string",
              "example": "2019-05-31T08:00:00+00:00"
            }
          }
        }
      },
      "TimeForecast": {
        "type":"array",
        "items": {
          "type":"object",
          "properties": {
            "time": {
              "type": "string",
              "example": "2019-05-31T08:00:00+00:00"
            },
            "forecast": {
              "$ref": "#/components/schemas/BeachForecast"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "number"
          },
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          }
        }
      }
    }
  }
}
